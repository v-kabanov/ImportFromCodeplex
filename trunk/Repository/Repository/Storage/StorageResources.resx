<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotChangeReadingDirectionWhenNonSequential" xml:space="preserve">
    <value>Cannot change reading direction when in non-sequential state.</value>
  </data>
  <data name="ContainerNotifiedOfDeletionOfUnknownFile" xml:space="preserve">
    <value>Repository file container notified about deletion of file with id {0:X} ({1:o}) which is not known to the container</value>
  </data>
  <data name="DataFoldersDepthInvalid" xml:space="preserve">
    <value>The data folders depth must be Hour, Day or Month.</value>
  </data>
  <data name="DataFolderTimeRangeViolation" xml:space="preserve">
    <value>The specified value violates containing data folder constraints</value>
  </data>
  <data name="DataIsNotLoaded" xml:space="preserve">
    <value>Data is not loaded</value>
  </data>
  <data name="ErOptionCannotBeSetAfterWriting" xml:space="preserve">
    <value>The option cannot be set after writing data.</value>
  </data>
  <data name="FileNotFoundInContainer" xml:space="preserve">
    <value>The specified file was not found in container</value>
  </data>
  <data name="FolderInstanceDoesNotImplementIFolder" xml:space="preserve">
    <value>Folder instance is invalid; it does not implement the required interface.</value>
  </data>
  <data name="IncompatibleVersion" xml:space="preserve">
    <value>Incompatible {0} version (expected: {1}, found: {2})</value>
    <comment>3 formatting parameters: name of the component, expected version, actual version.</comment>
  </data>
  <data name="InternalErrorFileContainerIndexCorrupt" xml:space="preserve">
    <value>Internal error: file container index is corrupt</value>
  </data>
  <data name="InvalidFileNamingFirstLast" xml:space="preserve">
    <value>File identifier is invalid - first item timestamp is greater than last.</value>
  </data>
  <data name="LeafFoldersCannotHaveChildFolders" xml:space="preserve">
    <value>Leaf folders cannot have child folders</value>
  </data>
  <data name="LevelOfDescendantRequired" xml:space="preserve">
    <value>The specified level does not represent descendants of this folder.</value>
  </data>
  <data name="OverlappingFileInContainer" xml:space="preserve">
    <value>File {0} overlaps with the existing file {1} in the container ({2}).</value>
  </data>
  <data name="OverlappingFilesInContainer" xml:space="preserve">
    <value>Overlapping files exist in the container</value>
  </data>
  <data name="OverlappingItemsDetected" xml:space="preserve">
    <value>Overlapping items detected</value>
  </data>
  <data name="PositionForFolderAlreadyExists" xml:space="preserve">
    <value>Position for the folder already exists in repository reading position</value>
  </data>
  <data name="UnknownCompressor_Name" xml:space="preserve">
    <value>Unknown compressor [{0}]. Please register the associated compressor in the repository manager's object factory.</value>
  </data>
  <data name="UnsavedItemsTrackingIsOff" xml:space="preserve">
    <value>The unsaved items tracking is turned OFF</value>
  </data>
  <data name="VirtualRootInvalidOperation" xml:space="preserve">
    <value>Virtual root data folder does not support this operation.</value>
  </data>
  <data name="WriterAlreadyExistsForFolder" xml:space="preserve">
    <value>Writer already exists for the folder {0}</value>
  </data>
  <data name="CannotChangeRepoInFactory" xml:space="preserve">
    <value>The repository cannot be changed once set.</value>
  </data>
  <data name="RepoFileAccessorMustBeInOverrideMode" xml:space="preserve">
    <value>Override mode must be ON.</value>
  </data>
  <data name="TransactionsNotSupported" xml:space="preserve">
    <value>Transactions are not supported.</value>
  </data>
  <data name="CannotModifyFolderWhileDataIsAccessed" xml:space="preserve">
    <value>Cannot modify folder {0} while data in it is being accessed.</value>
  </data>
  <data name="DataFileNotFound" xml:space="preserve">
    <value>Concurrent data modification detected: data file {0} was not found.</value>
  </data>
  <data name="DifferentRepositoriesException" xml:space="preserve">
    <value>Objects belong to different repositories</value>
  </data>
  <data name="FolderIsNotPartOfARepository" xml:space="preserve">
    <value>The folder instance is not part of a repository.</value>
  </data>
  <data name="FolderNotFound" xml:space="preserve">
    <value>The specified folder {0} was not found.</value>
  </data>
  <data name="PotentialConcurrencyIssueMessage" xml:space="preserve">
    <value>An issue is detected which may be related to a conflicting concurrent data update.</value>
  </data>
  <data name="ReaderLastItemTimeInFileMismatch" xml:space="preserve">
    <value>Timestamp of the last item read from data file {0} in folder {1} does not match file name. Expected: {2:o}, actual: {3:o}.</value>
  </data>
  <data name="FolderAlreadyExistsException" xml:space="preserve">
    <value>Folder with the specified name already exists.</value>
  </data>
  <data name="CannotDeleteFolderWithSubfolders" xml:space="preserve">
    <value>Cannot delete folder {0} because it contains subfolders.</value>
  </data>
  <data name="DescendantFolderNotFound" xml:space="preserve">
    <value>Descendant folder with relative path {0} was not found in {1}.</value>
    <comment>param 0: relative path, param 1: searched folder logical path</comment>
  </data>
  <data name="UnsupportedDataFileFormatVersion" xml:space="preserve">
    <value>Data file format version ({0}) is greater than the supported version ({1}</value>
  </data>
  <data name="ChildFolderInstanceByNameMismatch" xml:space="preserve">
    <value>The folder instance is different from the one registered in the list of child folders.</value>
  </data>
  <data name="FolderKeyInconsistentWithAncestor" xml:space="preserve">
    <value>Internal error: folder keys between this folder and its ancestor are inconsistent.</value>
  </data>
  <data name="FolderAlreadyContainsChildWithTheSameName" xml:space="preserve">
    <value>The folder already contains a child folder with the same name.</value>
  </data>
  <data name="RepositoryIsDisposed" xml:space="preserve">
    <value>The repository instance is disposed.</value>
  </data>
  <data name="ReaderIsDisposed" xml:space="preserve">
    <value>The reader is disposed.</value>
  </data>
  <data name="UnknownEncryptor_Name" xml:space="preserve">
    <value>Unknown encryptor [{0}]. Please register the associated encryptor in the repository manager's object factory.</value>
  </data>
  <data name="DataIntegrityViolationDetected" xml:space="preserve">
    <value>Data integrity violation detected.</value>
  </data>
  <data name="TechInfoDataItemCountMismatch" xml:space="preserve">
    <value>Data item count written in the header of the file {0} is {1}, but actual number of items was {2}.</value>
  </data>
  <data name="ContextInconsistentWithPendingTransaction" xml:space="preserve">
    <value>Context is inconsistent with the pending transaction.</value>
    <comment>Long transaction is registered as pending and during next transactionl call context must contain the same transaction; reason: cannot have more than one transaction at any point in time.</comment>
  </data>
  <data name="CannotMoveRootRepoFolder" xml:space="preserve">
    <value>Root folder is virtual and cannot be moved or removed.</value>
  </data>
  <data name="ReaderTargetFoldersMissing" xml:space="preserve">
    <value>Target folders not specified.</value>
  </data>
  <data name="CoderCodeEmpty" xml:space="preserve">
    <value>Coder code is empty or null.</value>
  </data>
  <data name="DuplicateCompressorCode" xml:space="preserve">
    <value>A compressor with the same code is already registered.</value>
  </data>
  <data name="IllegalCharactersInCoderЦоде" xml:space="preserve">
    <value>Illegal characters in the coder code.</value>
  </data>
  <data name="DuplicateEncryptorCode" xml:space="preserve">
    <value>An encryptor with the same code is already registered.</value>
  </data>
</root>